name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache build outputs
        uses: actions/cache@v3
        with:
          path: |
            **/bin
            **/obj
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Restore .NET workloads
        run: dotnet workload restore

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

  dotnet-tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore build outputs
        uses: actions/cache@v3
        with:
          path: |
            **/bin
            **/obj
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Run .NET tests
        run: dotnet test --no-build --verbosity normal --filter "TestCategory!=Playwright" --logger "trx;LogFileName=test_results.trx" --blame-hang --blame-hang-timeout 3m

      - name: Publish Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-test-results
          path: Aspiring.Tests/TestResults

      - name: Publish Code Coverage
        run: dotnet test --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Upload Code Coverage Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-results
          path: ./TestResults

  playwright-tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Install Playwright CLI
        run: npm install -g playwright

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Run Playwright tests
        run: dotnet test Aspiring.Web.Playwright.Tests/Aspiring.Web.Playwright.Tests.csproj --no-build --verbosity normal

      - name: Upload Playwright Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-test-results
          path: playwright-report

  publish:
    runs-on: ubuntu-latest
    needs: [dotnet-tests, playwright-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore build outputs
        uses: actions/cache@v3
        with:
          path: |
            **/bin
            **/obj
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Publish
        if: github.ref == 'refs/heads/main'
        run: dotnet publish -c Release -o ./publish --no-build

      - name: Deploy
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying application..."
          # Add your deployment script or commands here
